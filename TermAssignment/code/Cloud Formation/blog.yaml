Resources:
  LambdaFunctionViewBlog:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import base64

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('BlogTable')

          def lambda_handler(event, context):

              # Set up the scan parameters
              scan_params = {}

              # Use the scan method to retrieve all items from the table
              response = table.scan(**scan_params)
              items = response['Items']
              print(items) 
              blog_items =json.dumps(items)

              print(type(blog_items))
              itemsjson = json.loads(blog_items)
              print(itemsjson)

              return{
                  'statusCode': 200,
                  'body': itemsjson
              }

      Handler: lambda_function.lambda_handler
      FunctionName: "myViewBlogNew"
      Role: !Sub "arn:aws:iam::724917608342:role/LabRole"
      Runtime: python3.9

  LambdaFunctionSNSBlog:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              print(event['body'])
              body = json.loads(event['body'])

              # Create an SNS client
              sns = boto3.client('sns')

              # Subscribe to the SNS topic
              topic_arn = 'arn:aws:sns:us-east-1:724917608342:MyBlogTopic'
              email_address = body['email']
              subscription = sns.subscribe(TopicArn=topic_arn, Protocol='email', Endpoint=email_address)
              subscription_arn = subscription['SubscriptionArn']

              # Publish a message to the SNS topic
              message = "Thank you for your interest. Your blog post has been added successfully!"

              response = sns.publish(TopicArn=topic_arn, Message=message)
              message_id = response['MessageId']

              return {
                  'statusCode': 200,
                  'body': f'Subscribed to SNS topic {topic_arn} and published message {message} with ID {message_id}'
              }
      Handler: index.lambda_handler
      FunctionName: "mySNSBlogNew"
      Role: !Sub "arn:aws:iam::724917608342:role/LabRole"
      Runtime: python3.9
  
  MySNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: "Blog Topic"
      TopicName: "MyBlogTopicNew"

  LambdaFunctionAddBlog:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          # import base64
          # import gzip

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('BlogTable')

          def lambda_handler(event, context):
              # Parse the data from the frontend
              data = json.loads(event['body'])
              
              scan_params = {}
              
              # Use the scan method to retrieve all items from the table
              response = table.scan(**scan_params)
              items = response['Items']
              print(items)
              blog_items =json.dumps(items)
              print(blog_items)
              itemsjson = json.loads(blog_items)
              print(len(itemsjson))
              print(type(blog_items))
              tempid = len(itemsjson) + 1
              finalid = str(tempid)

              # Extract the fields from the data
              author_id = finalid
              author_name = data['authorName']
              bio = data['authorBio']
              content = data['content']
              title = data['title']
              image_data = data['image']
              # image_data_compressed = gzip.compress(image_data)
              
              # Encode the image data in base64
              #image_data = base64.b64encode(data['image']).decode('utf-8')
              
              # Put the data in DynamoDB
              table.put_item(
                  Item={
                      'authorId': author_id,
                      'authorName': author_name,
                      'bio': bio,
                      'content': content,
                      'title': title,
                      'imageData': image_data
                  }
              )

              # Return a success message to the frontend
              return {
                  'statusCode': 200,
                  'body': json.dumps('Blog post added successfully')
              }
      Handler: index.lambda_handler
      FunctionName: "myBlogLambdaNew"
      Role: !Sub "arn:aws:iam::724917608342:role/LabRole"
      Runtime: python3.9


  AddBlogLambdaFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref  LambdaFunctionAddBlog
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'

  apiGateway: 
    Type: AWS::ApiGatewayV2::Api 
    Properties: 
      Name: myBlogPostApis 
      ProtocolType: HTTP 
      CorsConfiguration: 
        AllowMethods: 
          - "*" 
        AllowOrigins: 
          - "*" 
        AllowHeaders: 
          - "*"

  apiGwRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref apiGateway
      RouteKey: 'POST /addBlog'
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref apiGwIntegration

  apiGwIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties: 
      ApiId: !Ref apiGateway
      IntegrationType: AWS_PROXY
      IntegrationMethod: "POST"
      IntegrationUri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionAddBlog.Arn}/invocations"
      PayloadFormatVersion: '2.0'

  apiGwStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: $default
      AutoDeploy: true
      ApiId: !Ref apiGateway

      # https://github.com/aws-samples/apigateway-http-api-access-control/blob/main/template.yaml



